{"id":"node_modules/@giphy/js-util/dist/bestfit.js","dependencies":[{"name":"D:\\testhub\\node_modules\\@giphy\\js-util\\dist\\bestfit.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\testhub\\node_modules\\@giphy\\js-util\\src\\bestfit.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\testhub\\package.json","includedInParent":true,"mtime":1633782651602},{"name":"D:\\testhub\\node_modules\\@giphy\\js-util\\package.json","includedInParent":true,"mtime":1633781127467},{"name":"./log","loc":{"line":4,"column":20},"parent":"D:\\testhub\\node_modules\\@giphy\\js-util\\dist\\bestfit.js","resolved":"D:\\testhub\\node_modules\\@giphy\\js-util\\dist\\log.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setRenditionScaleUpMaxPixels = void 0;\nvar log_1 = require(\"./log\");\nvar closestArea = function (width, height, renditions) {\n    var currentBest = Infinity;\n    var result;\n    // sort the renditions so we can avoid scaling up low resolutions\n    renditions.forEach(function (rendition) {\n        var widthPercentage = rendition.width / width;\n        var heightPercentage = rendition.height / height;\n        // a width percentage of 1 is exact, 2 is double, .5 half etc\n        var areaPercentage = widthPercentage * heightPercentage;\n        // img could be bigger or smaller\n        var testBest = Math.abs(1 - areaPercentage); // the closer to 0 the better\n        if (testBest < currentBest) {\n            currentBest = testBest;\n            result = rendition;\n        }\n    });\n    return result;\n};\nvar SCALE_UP_MAX_PIXELS = 50;\nvar setRenditionScaleUpMaxPixels = function (pixels) {\n    log_1.Logger.debug(\"@giphy/js-util set rendition selection scale up max pixels to \" + pixels);\n    SCALE_UP_MAX_PIXELS = pixels;\n};\nexports.setRenditionScaleUpMaxPixels = setRenditionScaleUpMaxPixels;\n/**\n * Finds image rendition that best fits a given container preferring images\n * ##### Note: all renditions are assumed to have the same aspect ratio\n *\n * When we have a portrait target and landscape gif, we choose a higher rendition to match\n * the height of the portrait target, otherwise it's blurry (same applies for landscape to portrait)\n *\n * @name bestfit\n * @function\n * @param {Array.<Object>} renditions available image renditions each having a width and height property\n * @param {Number} width\n * @param {Number} height\n * @param {Number} scaleUpMaxPixels the maximum pixels an asset should be scaled up\n */\nfunction bestfit(renditions, width, height, scaleUpMaxPixels) {\n    if (scaleUpMaxPixels === void 0) { scaleUpMaxPixels = SCALE_UP_MAX_PIXELS; }\n    var largestRendition = renditions[0];\n    // filter out renditions that are smaller than the target width and height by scaleUpMaxPixels value\n    var testRenditions = renditions.filter(function (rendition) {\n        if (rendition.width * rendition.height > largestRendition.width * largestRendition.height) {\n            largestRendition = rendition;\n        }\n        return width - rendition.width <= scaleUpMaxPixels && height - rendition.height <= scaleUpMaxPixels;\n    });\n    // if all are too small, use the largest we have\n    if (testRenditions.length === 0) {\n        return largestRendition;\n    }\n    // find the closest area of the filtered renditions\n    return closestArea(width, height, testRenditions);\n}\nexports.default = bestfit;\n"},"sourceMaps":{"js":{"version":3,"file":"bestfit.js","sourceRoot":"","sources":["../src/bestfit.ts"],"names":[],"mappings":";;;AACA,6BAA8B;AAE9B,IAAM,WAAW,GAAG,UAAC,KAAa,EAAE,MAAc,EAAE,UAAwB;IACxE,IAAI,WAAW,GAAG,QAAQ,CAAA;IAC1B,IAAI,MAAkB,CAAA;IACtB,iEAAiE;IACjE,UAAU,CAAC,OAAO,CAAC,UAAC,SAAqB;QACrC,IAAM,eAAe,GAAG,SAAS,CAAC,KAAK,GAAG,KAAK,CAAA;QAC/C,IAAM,gBAAgB,GAAG,SAAS,CAAC,MAAM,GAAG,MAAM,CAAA;QAClD,6DAA6D;QAC7D,IAAM,cAAc,GAAG,eAAe,GAAG,gBAAgB,CAAA;QACzD,iCAAiC;QACjC,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc,CAAC,CAAA,CAAC,6BAA6B;QAC3E,IAAI,QAAQ,GAAG,WAAW,EAAE;YACxB,WAAW,GAAG,QAAQ,CAAA;YACtB,MAAM,GAAG,SAAS,CAAA;SACrB;IACL,CAAC,CAAC,CAAA;IACF,OAAO,MAAO,CAAA;AAClB,CAAC,CAAA;AAED,IAAI,mBAAmB,GAAG,EAAE,CAAA;AACrB,IAAM,4BAA4B,GAAG,UAAC,MAAc;IACvD,YAAM,CAAC,KAAK,CAAC,mEAAiE,MAAQ,CAAC,CAAA;IACvF,mBAAmB,GAAG,MAAM,CAAA;AAChC,CAAC,CAAA;AAHY,QAAA,4BAA4B,gCAGxC;AACD;;;;;;;;;;;;;GAaG;AACH,SAAS,OAAO,CACZ,UAA6B,EAC7B,KAAa,EACb,MAAc,EACd,gBAA8C;IAA9C,iCAAA,EAAA,sCAA8C;IAEzC,IAAA,gBAAgB,GAAI,UAAU,GAAd,CAAc;IACnC,oGAAoG;IACpG,IAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,UAAA,SAAS;QAC9C,IAAI,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,GAAG,gBAAgB,CAAC,KAAK,GAAG,gBAAgB,CAAC,MAAM,EAAE;YACvF,gBAAgB,GAAG,SAAS,CAAA;SAC/B;QACD,OAAO,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,gBAAgB,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,IAAI,gBAAgB,CAAA;IACvG,CAAC,CAAC,CAAA;IACF,gDAAgD;IAChD,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7B,OAAO,gBAAgB,CAAA;KAC1B;IACD,mDAAmD;IACnD,OAAO,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,cAAc,CAAC,CAAA;AACrD,CAAC;AAED,kBAAe,OAAO,CAAA","sourcesContent":["import { IRendition } from '@giphy/js-types'\nimport { Logger } from './log'\n\nconst closestArea = (width: number, height: number, renditions: IRendition[]) => {\n    let currentBest = Infinity\n    let result: IRendition\n    // sort the renditions so we can avoid scaling up low resolutions\n    renditions.forEach((rendition: IRendition) => {\n        const widthPercentage = rendition.width / width\n        const heightPercentage = rendition.height / height\n        // a width percentage of 1 is exact, 2 is double, .5 half etc\n        const areaPercentage = widthPercentage * heightPercentage\n        // img could be bigger or smaller\n        const testBest = Math.abs(1 - areaPercentage) // the closer to 0 the better\n        if (testBest < currentBest) {\n            currentBest = testBest\n            result = rendition\n        }\n    })\n    return result!\n}\n\nlet SCALE_UP_MAX_PIXELS = 50\nexport const setRenditionScaleUpMaxPixels = (pixels: number) => {\n    Logger.debug(`@giphy/js-util set rendition selection scale up max pixels to ${pixels}`)\n    SCALE_UP_MAX_PIXELS = pixels\n}\n/**\n * Finds image rendition that best fits a given container preferring images\n * ##### Note: all renditions are assumed to have the same aspect ratio\n *\n * When we have a portrait target and landscape gif, we choose a higher rendition to match\n * the height of the portrait target, otherwise it's blurry (same applies for landscape to portrait)\n *\n * @name bestfit\n * @function\n * @param {Array.<Object>} renditions available image renditions each having a width and height property\n * @param {Number} width\n * @param {Number} height\n * @param {Number} scaleUpMaxPixels the maximum pixels an asset should be scaled up\n */\nfunction bestfit(\n    renditions: Array<IRendition>,\n    width: number,\n    height: number,\n    scaleUpMaxPixels: number = SCALE_UP_MAX_PIXELS\n) {\n    let [largestRendition] = renditions\n    // filter out renditions that are smaller than the target width and height by scaleUpMaxPixels value\n    const testRenditions = renditions.filter(rendition => {\n        if (rendition.width * rendition.height > largestRendition.width * largestRendition.height) {\n            largestRendition = rendition\n        }\n        return width - rendition.width <= scaleUpMaxPixels && height - rendition.height <= scaleUpMaxPixels\n    })\n    // if all are too small, use the largest we have\n    if (testRenditions.length === 0) {\n        return largestRendition\n    }\n    // find the closest area of the filtered renditions\n    return closestArea(width, height, testRenditions)\n}\n\nexport default bestfit\n"]}},"error":null,"hash":"a1b69edb9b7a05077175422c82caf4a8","cacheData":{"env":{}}}