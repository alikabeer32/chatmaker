{"id":"node_modules/@giphy/js-fetch-api/dist/api.js","dependencies":[{"name":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\api.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\src\\api.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\testhub\\package.json","includedInParent":true,"mtime":1633782651602},{"name":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\package.json","includedInParent":true,"mtime":1633781127523},{"name":"@giphy/js-util","loc":{"line":19,"column":24},"parent":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\api.js","resolved":"D:\\testhub\\node_modules\\@giphy\\js-util\\dist\\index.js"},{"name":"qs","loc":{"line":20,"column":35},"parent":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\api.js","resolved":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\node_modules\\qs\\lib\\index.js"},{"name":"./normalize/gif","loc":{"line":21,"column":20},"parent":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\api.js","resolved":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\normalize\\gif.js"},{"name":"./request","loc":{"line":22,"column":40},"parent":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\api.js","resolved":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\request.js"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GiphyFetch = void 0;\n/* eslint-disable no-dupe-class-members */\nvar js_util_1 = require(\"@giphy/js-util\");\nvar qs_1 = __importDefault(require(\"qs\"));\nvar gif_1 = require(\"./normalize/gif\");\nvar request_1 = __importDefault(require(\"./request\"));\nvar getType = function (options) { return (options && options.type ? options.type : 'gifs'); };\n/**\n * @class GiphyFetch\n * @param {string} apiKey\n */\nvar GiphyFetch = /** @class */ (function () {\n    function GiphyFetch(apiKey) {\n        var _this = this;\n        /**\n         * @hidden\n         */\n        this.getQS = function (options) {\n            if (options === void 0) { options = {}; }\n            return qs_1.default.stringify(__assign(__assign({}, options), { api_key: _this.apiKey, pingback_id: js_util_1.getPingbackId() }));\n        };\n        this.apiKey = apiKey;\n    }\n    /**\n     * A list of categories\n     *\n     * @param {CategoriesOptions} [options]\n     * @returns {Promise<CategoriesResult>}\n     */\n    GiphyFetch.prototype.categories = function (options) {\n        return request_1.default(\"gifs/categories?\" + this.getQS(options));\n    };\n    /**\n     * Get a single gif by a id\n     * @param {string} id\n     * @returns {Promise<GifsResult>}\n     **/\n    GiphyFetch.prototype.gif = function (id) {\n        return request_1.default(\"gifs/\" + id + \"?\" + this.getQS(), gif_1.normalizeGif);\n    };\n    GiphyFetch.prototype.gifs = function (arg1, arg2) {\n        if (Array.isArray(arg1)) {\n            return request_1.default(\"gifs?\" + this.getQS({ ids: arg1.join(',') }), gif_1.normalizeGifs);\n        }\n        return request_1.default(\"gifs/categories/\" + arg1 + \"/\" + arg2 + \"?\" + this.getQS(), gif_1.normalizeGifs);\n    };\n    GiphyFetch.prototype.emoji = function (options) {\n        return request_1.default(\"emoji?\" + this.getQS(options), gif_1.normalizeGifs);\n    };\n    GiphyFetch.prototype.animate = function (text, options) {\n        if (options === void 0) { options = {}; }\n        var qsParams = this.getQS(__assign(__assign({}, options), { m: text }));\n        return request_1.default(\"text/animate?\" + qsParams, gif_1.normalizeGifs);\n    };\n    /**\n     * @param term: string The term you're searching for\n     * @param options: SearchOptions\n     * @returns {Promise<GifsResult>}\n     **/\n    GiphyFetch.prototype.search = function (term, options) {\n        if (options === void 0) { options = {}; }\n        var q = options.channel ? \"@\" + options.channel + \" \" + term : term;\n        var excludeDynamicResults;\n        if (options.type === 'text') {\n            excludeDynamicResults = true;\n        }\n        var qsParams = this.getQS(__assign(__assign({}, options), { q: q, excludeDynamicResults: excludeDynamicResults }));\n        return request_1.default(getType(options) + \"/search?\" + qsParams, gif_1.normalizeGifs);\n    };\n    /**\n     * Get a list of subcategories\n     * @param {string} category\n     * @param {SubcategoriesOptions} options\n     * @returns {Promise<CategoriesResult>}\n     */\n    GiphyFetch.prototype.subcategories = function (category, options) {\n        return request_1.default(\"gifs/categories/\" + category + \"?\" + this.getQS(options));\n    };\n    /**\n     * Get trending gifs\n     *\n     * @param {TrendingOptions} options\n     * @returns {Promise<GifsResult>}\n     */\n    GiphyFetch.prototype.trending = function (options) {\n        if (options === void 0) { options = {}; }\n        return request_1.default(getType(options) + \"/trending?\" + this.getQS(options), gif_1.normalizeGifs);\n    };\n    /**\n     * Get a random gif\n     * @param {RandomOptions}\n     * @returns {Promise<GifResult>}\n     **/\n    GiphyFetch.prototype.random = function (options) {\n        return request_1.default(getType(options) + \"/random?\" + this.getQS(options), gif_1.normalizeGif, true);\n    };\n    /**\n     * Get related gifs by a id\n     * @param {string} id\n     * @param {SubcategoriesOptions} options\n     * @returns {Promise<GifsResult>}\n     **/\n    GiphyFetch.prototype.related = function (id, options) {\n        return request_1.default(((options === null || options === void 0 ? void 0 : options.type) === 'stickers' ? 'stickers' : 'gifs') + \"/related?\" + this.getQS(__assign({ gif_id: id }, options)), gif_1.normalizeGifs);\n    };\n    return GiphyFetch;\n}());\nexports.GiphyFetch = GiphyFetch;\nexports.default = GiphyFetch;\n"},"sourceMaps":{"js":{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-dupe-class-members */\nimport { getPingbackId } from '@giphy/js-util'\nimport qs from 'qs'\nimport { normalizeGif, normalizeGifs } from './normalize/gif'\nimport {\n    CategoriesOptions,\n    MediaType,\n    PaginationOptions,\n    RandomOptions,\n    RelatedOptions,\n    SearchOptions,\n    SubcategoriesOptions,\n    TrendingOptions,\n    TypeOption,\n} from './option-types'\nimport request from './request'\nimport { CategoriesResult, GifResult, GifsResult } from './result-types'\n\nconst getType = (options?: TypeOption): MediaType => (options && options.type ? options.type : 'gifs')\n/**\n * @class GiphyFetch\n * @param {string} apiKey\n */\nexport class GiphyFetch {\n    constructor(apiKey: string) {\n        this.apiKey = apiKey\n    }\n\n    /**\n     * @hidden\n     */\n    private apiKey: string\n    /**\n     * @hidden\n     */\n    private getQS = (options: any = {}) => {\n        return qs.stringify({ ...options, api_key: this.apiKey, pingback_id: getPingbackId() })\n    }\n\n    /**\n     * A list of categories\n     *\n     * @param {CategoriesOptions} [options]\n     * @returns {Promise<CategoriesResult>}\n     */\n    categories(options?: CategoriesOptions): Promise<CategoriesResult> {\n        return request(`gifs/categories?${this.getQS(options)}`) as Promise<CategoriesResult>\n    }\n\n    /**\n     * Get a single gif by a id\n     * @param {string} id\n     * @returns {Promise<GifsResult>}\n     **/\n    gif(id: string): Promise<GifResult> {\n        return request(`gifs/${id}?${this.getQS()}`, normalizeGif) as Promise<GifResult>\n    }\n\n    /**\n     *\n     * @function\n     * Get gifs by an array of ids\n     * @param {string[]} ids\n     *\n     * @function\n     * Get gifs by category and subcategory\n     * @param {string} category\n     * @param {string} subcategory\n     * @returns {Promise<GifsResult>}\n     **/\n    gifs(ids: string[]): Promise<GifsResult>\n    gifs(category: string, subcategory: string): Promise<GifsResult>\n    gifs(arg1: any, arg2?: string): Promise<GifsResult> {\n        if (Array.isArray(arg1)) {\n            return request(`gifs?${this.getQS({ ids: arg1.join(',') })}`, normalizeGifs) as Promise<GifsResult>\n        }\n        return request(`gifs/categories/${arg1}/${arg2}?${this.getQS()}`, normalizeGifs) as Promise<GifsResult>\n    }\n\n    emoji(options?: PaginationOptions): Promise<GifsResult> {\n        return request(`emoji?${this.getQS(options)}`, normalizeGifs) as Promise<GifsResult>\n    }\n\n    animate(text: string, options: PaginationOptions = {}): Promise<GifsResult> {\n        const qsParams = this.getQS({ ...options, m: text })\n        return request(`text/animate?${qsParams}`, normalizeGifs) as Promise<GifsResult>\n    }\n\n    /**\n     * @param term: string The term you're searching for\n     * @param options: SearchOptions\n     * @returns {Promise<GifsResult>}\n     **/\n    search(term: string, options: SearchOptions = {}): Promise<GifsResult> {\n        const q = options.channel ? `@${options.channel} ${term}` : term\n        let excludeDynamicResults\n        if (options.type === 'text') {\n            excludeDynamicResults = true\n        }\n        const qsParams = this.getQS({ ...options, q, excludeDynamicResults })\n        return request(`${getType(options)}/search?${qsParams}`, normalizeGifs) as Promise<GifsResult>\n    }\n\n    /**\n     * Get a list of subcategories\n     * @param {string} category\n     * @param {SubcategoriesOptions} options\n     * @returns {Promise<CategoriesResult>}\n     */\n    subcategories(category: string, options?: SubcategoriesOptions): Promise<CategoriesResult> {\n        return request(`gifs/categories/${category}?${this.getQS(options)}`) as Promise<CategoriesResult>\n    }\n\n    /**\n     * Get trending gifs\n     *\n     * @param {TrendingOptions} options\n     * @returns {Promise<GifsResult>}\n     */\n    trending(options: TrendingOptions = {}): Promise<GifsResult> {\n        return request(`${getType(options)}/trending?${this.getQS(options)}`, normalizeGifs) as Promise<GifsResult>\n    }\n\n    /**\n     * Get a random gif\n     * @param {RandomOptions}\n     * @returns {Promise<GifResult>}\n     **/\n    random(options?: RandomOptions): Promise<GifResult> {\n        return request(`${getType(options)}/random?${this.getQS(options)}`, normalizeGif, true) as Promise<GifResult>\n    }\n\n    /**\n     * Get related gifs by a id\n     * @param {string} id\n     * @param {SubcategoriesOptions} options\n     * @returns {Promise<GifsResult>}\n     **/\n    related(id: string, options?: RelatedOptions): Promise<GifsResult> {\n        return request(\n            `${options?.type === 'stickers' ? 'stickers' : 'gifs'}/related?${this.getQS({ gif_id: id, ...options })}`,\n            normalizeGifs\n        ) as Promise<GifsResult>\n    }\n}\nexport default GiphyFetch\n"]}},"error":null,"hash":"0b350d284cdd275db1b73943091bac7f","cacheData":{"env":{}}}