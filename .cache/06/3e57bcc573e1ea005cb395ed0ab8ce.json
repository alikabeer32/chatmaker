{"id":"node_modules/@giphy/js-fetch-api/dist/paginator.js","dependencies":[{"name":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\dist\\paginator.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\src\\paginator.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\testhub\\package.json","includedInParent":true,"mtime":1633782651602},{"name":"D:\\testhub\\node_modules\\@giphy\\js-fetch-api\\package.json","includedInParent":true,"mtime":1633781127523}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gifPaginator = void 0;\n/**\n * @hidden\n */\nvar gifPaginator = function (fetchGifs, initialGifs) {\n    if (initialGifs === void 0) { initialGifs = []; }\n    var gifs = __spreadArray([], initialGifs);\n    // for deduping\n    var gifIds = initialGifs.map(function (g) { return g.id; });\n    var offset = initialGifs.length;\n    var isDoneFetching = false;\n    return function () { return __awaiter(void 0, void 0, void 0, function () {\n        var result, pagination, newGifs;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (isDoneFetching) {\n                        return [2 /*return*/, gifs];\n                    }\n                    return [4 /*yield*/, fetchGifs(offset)];\n                case 1:\n                    result = _a.sent();\n                    pagination = result.pagination, newGifs = result.data;\n                    offset = pagination.count + pagination.offset;\n                    isDoneFetching = offset === pagination.total_count;\n                    newGifs.forEach(function (gif) {\n                        var id = gif.id;\n                        if (!gifIds.includes(id)) {\n                            // add gifs and gifIds\n                            gifs.push(gif);\n                            gifIds.push(id);\n                        }\n                    });\n                    return [2 /*return*/, __spreadArray([], gifs)];\n            }\n        });\n    }); };\n};\nexports.gifPaginator = gifPaginator;\n"},"sourceMaps":{"js":{"version":3,"file":"paginator.js","sourceRoot":"","sources":["../src/paginator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;GAEG;AACI,IAAM,YAAY,GAAG,UAAC,SAAkD,EAAE,WAAwB;IAAxB,4BAAA,EAAA,gBAAwB;IACrG,IAAM,IAAI,qBAAe,WAAW,CAAC,CAAA;IACrC,eAAe;IACf,IAAM,MAAM,GAAwB,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,EAAJ,CAAI,CAAC,CAAA;IAC9D,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAA;IAC/B,IAAI,cAAc,GAAG,KAAK,CAAA;IAC1B,OAAO;;;;;oBACH,IAAI,cAAc,EAAE;wBAChB,sBAAO,IAAI,EAAA;qBACd;oBACc,qBAAM,SAAS,CAAC,MAAM,CAAC,EAAA;;oBAAhC,MAAM,GAAG,SAAuB;oBAC9B,UAAU,GAAoB,MAAM,WAA1B,EAAQ,OAAO,GAAK,MAAM,KAAX,CAAW;oBAC5C,MAAM,GAAG,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAA;oBAC7C,cAAc,GAAG,MAAM,KAAK,UAAU,CAAC,WAAW,CAAA;oBAClD,OAAO,CAAC,OAAO,CAAC,UAAA,GAAG;wBACP,IAAA,EAAE,GAAK,GAAG,GAAR,CAAQ;wBAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;4BACtB,sBAAsB;4BACtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;4BACd,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;yBAClB;oBACL,CAAC,CAAC,CAAA;oBACF,wCAAW,IAAI,GAAC;;;SACnB,CAAA;AACL,CAAC,CAAA;AAxBY,QAAA,YAAY,gBAwBxB","sourcesContent":["import { IGif } from '@giphy/js-types'\nimport { GifsResult } from './result-types'\n\n/**\n * @hidden\n */\nexport const gifPaginator = (fetchGifs: (offset: number) => Promise<GifsResult>, initialGifs: IGif[] = []) => {\n    const gifs: IGif[] = [...initialGifs]\n    // for deduping\n    const gifIds: (string | number)[] = initialGifs.map(g => g.id)\n    let offset = initialGifs.length\n    let isDoneFetching = false\n    return async () => {\n        if (isDoneFetching) {\n            return gifs\n        }\n        const result = await fetchGifs(offset)\n        const { pagination, data: newGifs } = result\n        offset = pagination.count + pagination.offset\n        isDoneFetching = offset === pagination.total_count\n        newGifs.forEach(gif => {\n            const { id } = gif\n            if (!gifIds.includes(id)) {\n                // add gifs and gifIds\n                gifs.push(gif)\n                gifIds.push(id)\n            }\n        })\n        return [...gifs]\n    }\n}\n"]}},"error":null,"hash":"f03f8b8286a41f72fbeafca2449e03a2","cacheData":{"env":{}}}